`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12.04.2023 14:41:27
// Design Name: 
// Module Name: uart_tx_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module uart_tx_tb();
    
    // general;
    localparam T = 10;  // system clock period: 10ns;
    logic clk;          // system clock;
    logic reset;        // async system clock;
    
    // constants;
    localparam DATA_BIT = 8;
    localparam SAMPLING_STOP_BIT = 16; // one stop bit;
    
    
    /* uart tx */
    logic tx_start;     // input; request tx start;
    logic [DATA_BIT-1:0] din;   // input; to transmit;
    logic baud_rate_tick;   // input; generated by the baud rate gen;
    logic tx_complete_tick; // output;
    logic tx;   // output;
    
    
    /* baud rate */
    // the minimum supported standard baud rate is 110 b/s;
    // this requires 9 ms simulation time;
    // this exceeds the simulation time supported by vivado;
    // hence, we artificially inflate the baud rate;
    // just make sure to respect this constraint: 16*baud_rate < 100Mhz;
    localparam baud_rate = 500000;         // bits per second;
    localparam programmable_mod = 100000000/(16*baud_rate);;  // input to program the baud rate gen;
    
    
    /* instantiation */
   
   // to drive uart tx;
   baud_rate_generator baud_gen_tx
   (.clk(clk), 
   .reset(reset), 
   .programmable_mod(programmable_mod), 
   .sampling_tick(baud_rate_tick));
   
   // uart tx;
   uart_tx #(.DATA_BIT(DATA_BIT), .SAMPLING_STOP_BIT(SAMPLING_STOP_BIT))
    uut
    (   
      .clk(clk),
      .reset(reset),
      .tx_start(tx_start),
      .din(din),
      .baud_rate_tick(baud_rate_tick),
      .tx_complete_tick(tx_complete_tick),
      .tx(tx)
    );
   
   
   /* simulate clk */
   // simulate system clk
    always
    begin 
       clk = 1'b1;  
       #(T/2); 
       clk = 1'b0;  
       #(T/2);
    end

    // apply reset;
    initial
    begin
        tx_start = 1'b0;
        //din = (DATA_BIT)'($random);
        //din = 8'b1010_1101;
        din = 8'b0011_1100;
        
        reset = 1'b1;
        #(T/2);
        reset = 1'b0;
        #(T/2);
        @(negedge clk); // avoid data setup and hold time for subsequent simulation;
    end
    
    // set up values;
    initial 
    begin
        // start the tx;
        tx_start = 1'b1;
        #(2*T);
        tx_start = 1'b0;
        
        #(1000*T);
        #(1000*T);
        #(1000*T);
        $stop;
    end
    
    /// monitoring;
    initial 
    begin
    $display("program mod: %0d", programmable_mod);
    $monitor("tx din: %0B", din);
    $monitor("time %0t, state: %s, data_buffer: %0B, tx_flag: %0b, tx: %0b",
        $time, uut.state_reg.name, uut.shift_out_reg, tx_complete_tick, tx);
    end
   
    
endmodule
